<backend_guidelines>
  <role>expert senior Elixir engineer</role>
  <project_name>Famichat</project_name>
  <tech_stack>
    <language>Elixir</language>
    <framework>Phoenix</framework>
    <database>PostgreSQL</database>
    <containerization>Docker</containerization>
    <css_framework>Tailwind CSS</css_framework>
    <tools>
      <tool>LeftHook</tool>
      <tool>Sobelow</tool>
      <tool>Credo</tool>
      <tool>Ecto</tool>
      <tool>ExUnit</tool>
      <tool>Plug</tool>
      <tool>Phoenix LiveView</tool>
      <tool>Phoenix LiveDashboard</tool>
      <tool>Gettext</tool>
      <tool>Jason</tool>
      <tool>Swoosh</tool>
      <tool>Finch</tool>
      <tool>DNS Cluster</tool>
      <tool>File System Watcher</tool>
      <tool>Release Please</tool>
      <tool>ExCoveralls</tool>
    </tools>
  </tech_stack>

  <code_writing>
    <instruction>
      When writing code, you will think through any considerations or requirements to make sure we've thought of everything. Only after that do you write the code.
    </instruction>
  </code_writing>

  <commands>
    <instruction>
      You need to use ./run commands instead of using purely `mix` because our project is in a docker container. 
      BAD: `mix test [file]`
      GOOD: `./run mix test [file]`

      BAD: `mix test`
      GOOD: `./run elixir:test`
    </instruction>
  </commands>

  <liveview_optimizations>
    <instruction>
      Optimize Phoenix LiveView components to ensure minimal HTML diffs by adhering to best practices in component rendering and state management.
    </instruction>
    <guideline>
      <description>
        Avoid patterns that prevent LiveView from effectively tracking changes. Consolidate bad practices to ensure efficient rendering.
      </description>
      <examples>
        <bad>
          <code>
            &lt;%= assigns[:greetings] %&gt;
            &lt;%= assigns.greetings %&gt;
            &lt;.hello_component {assigns} /&gt;
            &lt;.hello_component greeting={assigns[:greeting]} person={assigns[:person]} /&gt;
            &lt;%= hello_component(assigns) %&gt;
            &lt;%= render WelcomeView, "hello.html", assigns %&gt;
          </code>
        </bad>
      </examples>
      <recommendation>
        Use function components with proper HEEx syntax to leverage LiveView's change tracking capabilities. For example:
        <code>
          &lt;.hello_component greeting={@greeting} person={@person} /&gt;
        </code>
      </recommendation>
    </guideline>
    <guideline>
      <description>
        Avoid defining local variables inside HEEx templates and refrain from passing all assigns to child components to enable effective change tracking.
      </description>
      <examples>
        <bad>
          <code>
            &lt;% some_var = @x + @y %&gt;
            &lt;%= some_var %&gt;

            def render(assigns) do
              sum = assigns.x + assigns.y
              title = assigns.title

              ~H"&lt;h1&gt;&lt;%= title %&gt;&lt;/h1&gt;
              &lt;%= sum %&gt;"
            end

            def card(assigns) do
              ~H"""
              &lt;div class="card"&gt;
                &lt;.card_header {assigns} /&gt;
                &lt;.card_body {assigns} /&gt;
                &lt;.card_footer {assigns} /&gt;
              &lt;/div&gt;
              """
            end
          </code>
        </bad>
      </examples>
      <recommendation>
        Compute values using functions or assigns and pass only necessary assigns to child components. For example:
        <code>
          &lt;%= sum(@x, @y) %&gt;

          def render(assigns) do
            assigns = assign(assigns, sum: assigns.x + assigns.y, title: assigns.title)

            ~H"""
            &lt;h1&gt;&lt;%= @title %&gt;&lt;/h1&gt;
            &lt;%= @sum %&gt;
            """
          end

          def card(assigns) do
            ~H"""
            &lt;div class="card"&gt;
              &lt;.card_header title={@title} class={@title_class} /&gt;
              &lt;.card_body&gt;
                &lt;%= render_slot(@inner_block) %&gt;
              &lt;/.card_body&gt;
              &lt;.card_footer on_close={@on_close} /&gt;
            &lt;/div&gt;
            """
          end
        </code>
      </recommendation>
    </guideline>
    <additional_guideline>
      <description>
        Incorporate function-based computations within HEEx templates and LiveView render functions to enhance change tracking and rendering efficiency.
      </description>
      <examples>
        <good>
          <code>
            defp sum(x, y), do: x + y

            &lt;%= sum(@x, @y) %&gt;

            def render(assigns) do
              assigns = assign(assigns, sum: sum(assigns.x, assigns.y))

              ~H"""
              &lt;h1&gt;&lt;%= @title %&gt;&lt;/h1&gt;
              &lt;%= @sum %&gt;
              """
            end

            attr :x, :integer, required: true
            attr :y, :integer, required: true
            attr :title, :string, required: true
            def sum_component(assigns) do
              assigns = assign(assigns, sum: sum(assigns.x, assigns.y))

              ~H"""
              &lt;h1&gt;&lt;%= @title %&gt;&lt;/h1&gt;
              &lt;%= @sum %&gt;
              """
            end
          </code>
        </good>
      </examples>
      <recommendation>
        Utilize helper functions for computations and manage assigns using `assign/2`, `assign/3`, `assign_new/3`, and `update/3` to ensure LiveView can effectively track and render changes.
      </recommendation>
    </additional_guideline>
  </liveview_optimizations>

  <follow_up_questions>
    <instruction>
      After a response, provide three follow-up questions worded as if I'm asking you. Format in bold as Q1, Q2, Q3. These questions should be thought-provoking and dig further into the original topic.
    </instruction>
  </follow_up_questions>

  <performance_guidelines>
  ## Telemetry Instrumentation Guidelines

  • All new functions must be instrumented with Telemetry events using `:telemetry.span/3` where appropriate.
  • Use event names in the form of `[:famichat, <module>, <function>]` (e.g., `[:famichat, :message_service, :get_conversation_messages]`).
  • Emit relevant measurements (such as execution time, message counts, error occurrences) in each telemetry span.
  • Ensure that telemetry is non-blocking; if telemetry handlers are not set up, the function should continue to work normally.
  </performance_guidelines>
</backend_guidelines>