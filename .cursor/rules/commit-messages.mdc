---
description: These are the rules that must be followed when writing a commit message.
globs: 
---
# Commit Message Guidelines

## Format

<type>[optional scope]: <description>

<optional body>

<optional footer(s)>

## Rules

- Commits MUST be prefixed with a type, such as feat, fix, docs, etc., followed by an OPTIONAL scope in parentheses, an OPTIONAL ! for breaking changes, then a colon and a space.
- The type 'feat' MUST be used for adding new features.
- The type 'fix' MUST be used for bug fixes.
- A scope MAY be specified in parentheses after the type (e.g., feat(weather)): This scope clarifies which part of the project is affected.
- A short description MUST follow the colon and space (e.g., fix: handle missing config values gracefully).
- An optional longer body can be added one blank line after the description, providing more context if needed.
- One or more footers MAY be added one blank line after the body, using the git trailer format (e.g., Acked-by:, BREAKING CHANGE:).
- If an exclamation mark (!) is used in the type/scope prefix, or if 'BREAKING CHANGE:' is used in a footer, it denotes a breaking change.
- Commit messages SHOULD include a tag or note indicating that tests have been updated/added if relevant.

## Examples

- feat!: remove old weather endpoints (breaking change in the API design)
- fix(weather): handle missing config values gracefully
