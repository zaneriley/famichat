---
description: Use these rules any time your working in the backend, with elixir code, or needing to run commands in docker.
globs: *.ex, *.exs, *.heex, backend/
alwaysApply: false
---
## Core Environment Understanding
1. **ALWAYS assume Docker-based environments**: Never run commands directly on the host system.
   - All operations must be performed through the project's `./run` script
   - Direct `mix`, `yarn`, or `npm` commands will fail or have unexpected effects

2. **NEVER use direct commands** like:
   - `mix deps.get`
   - `mix assets.deploy`
   - `npm install`
   - `yarn build`

3. **ALWAYS use the run script wrapper**:
   - `./run mix:install` (NOT `mix deps.get`)
   - `./run yarn:build:css` (NOT `yarn build` or similar)
   - `./run yarn:build:js` (NOT direct JS build commands)
   - `./run elixir:format` (NOT `mix format`)

## Troubleshooting Asset Issues

1. **CSS/Tailwind issues**: When utilities are missing:
   - NEVER edit Tailwind config directly - use `./run yarn:build:css`
   - For full CSS rebuild: `./run mix assets.deploy`
   - For font issues: `./run assets:font-metrics`

2. **Container-specific paths**: 
   - Container paths start with `/app/` not local relative paths
   - Static files must be in `/app/priv/static/` to be served

## Error Response Protocol
1. When encountering build/asset errors:
   - First check the `run` script for appropriate commands
   - Use `./run clean` followed by `./run mix assets.deploy`
   - For Docker-specific issues, consider `docker compose down && docker compose up -d`

2. NEVER attempt to modify files without first:
   - Understanding where they are located in the Docker container
   - Determining the correct `./run` command to rebuild them
